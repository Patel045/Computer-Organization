module ripple_carry_adder (
  input [3:0] A,
  input [3:0] B,
  input Cin,
  output [3:0] Sum,
  output Cout
);

wire [3:0] rippleSum;
wire C0, C1, C2, C3;

// Calculate the Sum and Carry-out for each bit
assign rippleSum[0] = A[0] ^ B[0] ^ Cin;
assign C0 = (A[0] & B[0]) | (Cin & (A[0] ^ B[0]));
assign rippleSum[1] = A[1] ^ B[1] ^ C0;
assign C1 = (A[1] & B[1]) | (C0 & (A[1] ^ B[1]));
assign rippleSum[2] = A[2] ^ B[2] ^ C1;
assign C2 = (A[2] & B[2]) | (C1 & (A[2] ^ B[2]));
assign rippleSum[3] = A[3] ^ B[3] ^ C2;
assign C3 = (A[3] & B[3]) | (C2 & (A[3] ^ B[3]));

// Output Sum and final Carry-out
assign Sum = rippleSum;
assign Cout = C3;

endmodule
